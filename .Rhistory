at = 1:3,
col = 2,
boxwex = 0.5,
xlim = c(0, 4),
xaxt = "n"
)
abline(h = beta, lty = 2)
# ptm=proc.time()
# T=1000
# outre=matrix(0,6,9)
# rownames(outre)<-be
# # colnames(outre)<-c("pro","mod","new","mpro","mmod","mnew")
# #
#
# for (r in 1:6){
#   beta=be[r]
#   Popdata=genmaf.popdata(alpha,beta,gamma,maf,N=Pop.N )
#   Nc=unlist(lapply(Popdata,function(x){dim(x)[1]}))
#   sim=replicate(T,{
#     ccdata=gen.ccdata(n,Popdata,Nc)
#     y=ccdata$y
#     G=ccdata$g
#     X=ccdata[,-(1:2)]
#     cp.estimate(y,G,X=X)})
#   result=t(sim)
#   value=result[,1:3]
#   pvalue=result[,-(1:3)]
#   mse=apply(value,2,function(x){mean((x-beta)^2)})
#   bias=apply(value,2,function(x){mean(x)-beta})
#   power=apply(pvalue<0.05,2,mean,rm.na=TRUE)
#   outre[r,]=round(c(mse,bias,power),4)
#   cat("/nThe beta is ",beta)
#   cat("/nThe power is ",power,"/n")
# }
# proc.time()-ptm
# setwd("/maf-no/")
# e=c("maf1.txt","maf2.txt","maf3.txt","maf4.txt","maf5.txt","maf6.txt","maf7.txt","maf8.txt","maf9.txt")
# write.csv(outre,e[m.index])
#
#
power
#------------set the parameter------------------------
Pop.N = 3000000
Popdata=genmaf.popdata(alpha,beta,gamma,maf,N=Pop.N )
#------------set the parameter------------------------
Pop.N = 300000
Popdata=genmaf.popdata(alpha,beta,gamma,maf,N=Pop.N )
View(sim)
sum(sim[7,])
sum(sim[7,])/1000
rm(list= ls())
library(MASS)
library(rms)
library(maxLik)
library(Rcpp)
library(netgwas)
setwd("/home/o0/Desktop/pom/code/")
# setwd("C:/Users/o0/Desktop/MSE for POM/code")
source("likelihood.R")
sourceCpp("likelihood.cpp")
sourceCpp("likelihoodgrad.cpp")
# sourceCpp("likelihoodmod.cpp")
# sourceCpp("likelihoodmodgrad.cpp")
##---------------generate data function-----------------
genmaf.popdata = function(alpha, beta, gamma, maf, N) {
pG = c((1 - maf) ^ 2, 2 * maf * (1 - maf), maf ^ 2)
k= length(gamma)
if (k==0){
x=NULL
}else if(k==1){
x=rnorm(N,0,1)
}else if(k==2){
Sigma <- matrix(c(10,3,3,2),2,2)
x=mvrnorm(n = N, rep(0, 2), Sigma)
}
g = sample(0:2, N, replace = TRUE, prob = pG)
y = numeric(N)
if (is.null(x)) {
py = (1 + exp(-outer(alpha, -beta * g  , "+"))) ^ (-1)
aa = runif(N)
for (i in 1:N)
y[i] = sum(aa[i] > py[, i])
y = as.numeric(as.factor(y))
data=data.frame(y = y, g = g)
}
else{
x = as.matrix(x)
py = (1 + exp(-outer(alpha, -beta * g - rowSums(gamma * x)  , "+"))) ^(-1)
aa = runif(N)
for (i in 1:N)
y[i] = sum(aa[i] > py[, i])
y = as.numeric(as.factor(y))
data=data.frame(y = y, g = g, x = x)
}
pop=list()
for (j in 1:J){
pop[[j]] = subset(data, y == j)
}
return(pop)
}
gen.ccdata = function(n, data,Nc) {
cs <- NULL
for (j in 1:J) {
new <- data[[j]][sample(1:Nc[j], n[j]), ]
cs = rbind(cs, new)
}
return(cs)
}
#------------set the parameter------------------------
Pop.N = 300000
#Pr(y=1)=0.97,P(Y=2)=0.02,P(Y=3)=0.01
##the number of category
J = 3
alpha = c(3.48, 4.6)
# alpha=c(4.18,5.27)
n = c(500, 300, 200)
nobs= sum(n)
# J=4
# alpha=c(3.89,4.59,5.51)
# n=c(1500,200,150,150)
##the dim of covariate
K = 1
gamma=rep(0.5,K)
##------------------------beta-------------------------
be = c(0, log(1.1), log(1.2), log(1.3), log(1.4), log(1.5))
# be=c(0,0.1,0.4,0.8,1,2)
ma = seq(0.05, 0.45, 0.05)
b.index = 1
beta = be[b.index]
#maf
m.index = 7
maf = ma[m.index]
##--------------------simulation---------------------------------
ptm = proc.time()
T = 1000
n=c(500,300,200)
sim=replicate(T,{
Popdata=genmaf.popdata(alpha,beta,gamma,maf,N=Pop.N )
Nc=unlist(lapply(Popdata,function(x){dim(x)[1]}))
ccdata = gen.ccdata(n, Popdata,Nc)
y = ccdata$y
G = ccdata$g
X = ccdata[,-(1:2)]
#c++
p_value=cp.estimate(y,G,X)
#
res=netphenogeno(data = ccdata,method = "npn")
#Select an optimal network
sel <- selectnet(res)
ind_net = sel$opt.adj[1,2]
return(c(p_value,ind_net))
})
proc.time() - ptm
value = sim[1:3,]
pvalue = sim[4:6,]
##mse
mse = apply(value, 2, function(x) {mean((x - beta) ^ 2)})
##power
power=apply(pvalue < 0.05, 1, mean, rm.na = TRUE)
power[4] = 1 - sum(sim[7,]==0)/T
# boxplot(
#   t(sim[1:3,]),
#   at = 1:3,
#   col = 2,
#   boxwex = 0.5,
#   xlim = c(0, 4),
#   xaxt = "n"
# )
# abline(h = beta, lty = 2)
# ptm=proc.time()
# T=1000
# outre=matrix(0,6,9)
# rownames(outre)<-be
# # colnames(outre)<-c("pro","mod","new","mpro","mmod","mnew")
# #
#
# for (r in 1:6){
#   beta=be[r]
#   Popdata=genmaf.popdata(alpha,beta,gamma,maf,N=Pop.N )
#   Nc=unlist(lapply(Popdata,function(x){dim(x)[1]}))
#   sim=replicate(T,{
#     ccdata=gen.ccdata(n,Popdata,Nc)
#     y=ccdata$y
#     G=ccdata$g
#     X=ccdata[,-(1:2)]
#     cp.estimate(y,G,X=X)})
#   result=t(sim)
#   value=result[,1:3]
#   pvalue=result[,-(1:3)]
#   mse=apply(value,2,function(x){mean((x-beta)^2)})
#   bias=apply(value,2,function(x){mean(x)-beta})
#   power=apply(pvalue<0.05,2,mean,rm.na=TRUE)
#   outre[r,]=round(c(mse,bias,power),4)
#   cat("/nThe beta is ",beta)
#   cat("/nThe power is ",power,"/n")
# }
# proc.time()-ptm
# setwd("/maf-no/")
# e=c("maf1.txt","maf2.txt","maf3.txt","maf4.txt","maf5.txt","maf6.txt","maf7.txt","maf8.txt","maf9.txt")
# write.csv(outre,e[m.index])
#
#
power
maf
rm(list= ls())
library(MASS)
library(rms)
library(maxLik)
library(Rcpp)
library(netgwas)
setwd("/home/o0/Desktop/pom/code/")
# setwd("C:/Users/o0/Desktop/MSE for POM/code")
source("likelihood.R")
sourceCpp("likelihood.cpp")
sourceCpp("likelihoodgrad.cpp")
# sourceCpp("likelihoodmod.cpp")
# sourceCpp("likelihoodmodgrad.cpp")
##---------------generate data function-----------------
genmaf.popdata = function(alpha, beta, gamma, maf, N) {
pG = c((1 - maf) ^ 2, 2 * maf * (1 - maf), maf ^ 2)
k= length(gamma)
if (k==0){
x=NULL
}else if(k==1){
x=rnorm(N,0,1)
}else if(k==2){
Sigma <- matrix(c(10,3,3,2),2,2)
x=mvrnorm(n = N, rep(0, 2), Sigma)
}
g = sample(0:2, N, replace = TRUE, prob = pG)
y = numeric(N)
if (is.null(x)) {
py = (1 + exp(-outer(alpha, -beta * g  , "+"))) ^ (-1)
aa = runif(N)
for (i in 1:N)
y[i] = sum(aa[i] > py[, i])
y = as.numeric(as.factor(y))
data=data.frame(y = y, g = g)
}
else{
x = as.matrix(x)
py = (1 + exp(-outer(alpha, -beta * g - rowSums(gamma * x)  , "+"))) ^(-1)
aa = runif(N)
for (i in 1:N)
y[i] = sum(aa[i] > py[, i])
y = as.numeric(as.factor(y))
data=data.frame(y = y, g = g, x = x)
}
pop=list()
for (j in 1:J){
pop[[j]] = subset(data, y == j)
}
return(pop)
}
gen.ccdata = function(n, data,Nc) {
cs <- NULL
for (j in 1:J) {
new <- data[[j]][sample(1:Nc[j], n[j]), ]
cs = rbind(cs, new)
}
return(cs)
}
#------------set the parameter------------------------
Pop.N = 300000
#Pr(y=1)=0.97,P(Y=2)=0.02,P(Y=3)=0.01
##the number of category
J = 3
alpha = c(3.48, 4.6)
# alpha=c(4.18,5.27)
n = c(500, 300, 200)
nobs= sum(n)
# J=4
# alpha=c(3.89,4.59,5.51)
# n=c(1500,200,150,150)
##the dim of covariate
K = 1
gamma=rep(0.5,K)
##------------------------beta-------------------------
be = c(0, log(1.1), log(1.2), log(1.3), log(1.4), log(1.5))
# be=c(0,0.1,0.4,0.8,1,2)
ma = seq(0.05, 0.45, 0.05)
b.index = 1
beta = be[b.index]
#maf
m.index = 4
maf = ma[m.index]
##--------------------simulation---------------------------------
ptm = proc.time()
T = 1000
n=c(500,300,200)
sim=replicate(T,{
Popdata=genmaf.popdata(alpha,beta,gamma,maf,N=Pop.N )
Nc=unlist(lapply(Popdata,function(x){dim(x)[1]}))
ccdata = gen.ccdata(n, Popdata,Nc)
y = ccdata$y
G = ccdata$g
X = ccdata[,-(1:2)]
#c++
p_value=cp.estimate(y,G,X)
#
res=netphenogeno(data = ccdata,method = "npn")
#Select an optimal network
sel <- selectnet(res)
ind_net = sel$opt.adj[1,2]
return(c(p_value,ind_net))
})
proc.time() - ptm
value = sim[1:3,]
pvalue = sim[4:6,]
##mse
mse = apply(value, 2, function(x) {mean((x - beta) ^ 2)})
##power
power=apply(pvalue < 0.05, 1, mean, rm.na = TRUE)
power[4] = 1 - sum(sim[7,]==0)/T
# boxplot(
#   t(sim[1:3,]),
#   at = 1:3,
#   col = 2,
#   boxwex = 0.5,
#   xlim = c(0, 4),
#   xaxt = "n"
# )
# abline(h = beta, lty = 2)
# ptm=proc.time()
# T=1000
# outre=matrix(0,6,9)
# rownames(outre)<-be
# # colnames(outre)<-c("pro","mod","new","mpro","mmod","mnew")
# #
#
# for (r in 1:6){
#   beta=be[r]
#   Popdata=genmaf.popdata(alpha,beta,gamma,maf,N=Pop.N )
#   Nc=unlist(lapply(Popdata,function(x){dim(x)[1]}))
#   sim=replicate(T,{
#     ccdata=gen.ccdata(n,Popdata,Nc)
#     y=ccdata$y
#     G=ccdata$g
#     X=ccdata[,-(1:2)]
#     cp.estimate(y,G,X=X)})
#   result=t(sim)
#   value=result[,1:3]
#   pvalue=result[,-(1:3)]
#   mse=apply(value,2,function(x){mean((x-beta)^2)})
#   bias=apply(value,2,function(x){mean(x)-beta})
#   power=apply(pvalue<0.05,2,mean,rm.na=TRUE)
#   outre[r,]=round(c(mse,bias,power),4)
#   cat("/nThe beta is ",beta)
#   cat("/nThe power is ",power,"/n")
# }
# proc.time()-ptm
# setwd("/maf-no/")
# e=c("maf1.txt","maf2.txt","maf3.txt","maf4.txt","maf5.txt","maf6.txt","maf7.txt","maf8.txt","maf9.txt")
# write.csv(outre,e[m.index])
#
#
power
maf
rm(list= ls())
library(MASS)
library(rms)
library(maxLik)
library(Rcpp)
library(netgwas)
setwd("/home/o0/Desktop/pom/code/")
# setwd("C:/Users/o0/Desktop/MSE for POM/code")
source("likelihood.R")
sourceCpp("likelihood.cpp")
sourceCpp("likelihoodgrad.cpp")
# sourceCpp("likelihoodmod.cpp")
# sourceCpp("likelihoodmodgrad.cpp")
##---------------generate data function-----------------
genmaf.popdata = function(alpha, beta, gamma, maf, N) {
pG = c((1 - maf) ^ 2, 2 * maf * (1 - maf), maf ^ 2)
k= length(gamma)
if (k==0){
x=NULL
}else if(k==1){
x=rnorm(N,0,1)
}else if(k==2){
Sigma <- matrix(c(10,3,3,2),2,2)
x=mvrnorm(n = N, rep(0, 2), Sigma)
}
g = sample(0:2, N, replace = TRUE, prob = pG)
y = numeric(N)
if (is.null(x)) {
py = (1 + exp(-outer(alpha, -beta * g  , "+"))) ^ (-1)
aa = runif(N)
for (i in 1:N)
y[i] = sum(aa[i] > py[, i])
y = as.numeric(as.factor(y))
data=data.frame(y = y, g = g)
}
else{
x = as.matrix(x)
py = (1 + exp(-outer(alpha, -beta * g - rowSums(gamma * x)  , "+"))) ^(-1)
aa = runif(N)
for (i in 1:N)
y[i] = sum(aa[i] > py[, i])
y = as.numeric(as.factor(y))
data=data.frame(y = y, g = g, x = x)
}
pop=list()
for (j in 1:J){
pop[[j]] = subset(data, y == j)
}
return(pop)
}
gen.ccdata = function(n, data,Nc) {
cs <- NULL
for (j in 1:J) {
new <- data[[j]][sample(1:Nc[j], n[j]), ]
cs = rbind(cs, new)
}
return(cs)
}
#------------set the parameter------------------------
Pop.N = 300000
#Pr(y=1)=0.97,P(Y=2)=0.02,P(Y=3)=0.01
##the number of category
J = 3
alpha = c(3.48, 4.6)
# alpha=c(4.18,5.27)
n = c(500, 300, 200)
nobs= sum(n)
# J=4
# alpha=c(3.89,4.59,5.51)
# n=c(1500,200,150,150)
##the dim of covariate
K = 1
gamma=rep(0.5,K)
##------------------------beta-------------------------
be = c(0, log(1.1), log(1.2), log(1.3), log(1.4), log(1.5))
# be=c(0,0.1,0.4,0.8,1,2)
ma = seq(0.05, 0.45, 0.05)
b.index = 1
beta = be[b.index]
#maf
m.index = 3
maf = ma[m.index]
##--------------------simulation---------------------------------
ptm = proc.time()
T = 1000
n=c(500,300,200)
sim=replicate(T,{
Popdata=genmaf.popdata(alpha,beta,gamma,maf,N=Pop.N )
Nc=unlist(lapply(Popdata,function(x){dim(x)[1]}))
ccdata = gen.ccdata(n, Popdata,Nc)
y = ccdata$y
G = ccdata$g
X = ccdata[,-(1:2)]
#c++
p_value=cp.estimate(y,G,X)
#
res=netphenogeno(data = ccdata,method = "npn")
#Select an optimal network
sel <- selectnet(res)
ind_net = sel$opt.adj[1,2]
return(c(p_value,ind_net))
})
proc.time() - ptm
value = sim[1:3,]
pvalue = sim[4:6,]
##mse
mse = apply(value, 2, function(x) {mean((x - beta) ^ 2)})
##power
power=apply(pvalue < 0.05, 1, mean, rm.na = TRUE)
power[4] = 1 - sum(sim[7,]==0)/T
# boxplot(
#   t(sim[1:3,]),
#   at = 1:3,
#   col = 2,
#   boxwex = 0.5,
#   xlim = c(0, 4),
#   xaxt = "n"
# )
# abline(h = beta, lty = 2)
# ptm=proc.time()
# T=1000
# outre=matrix(0,6,9)
# rownames(outre)<-be
# # colnames(outre)<-c("pro","mod","new","mpro","mmod","mnew")
# #
#
# for (r in 1:6){
#   beta=be[r]
#   Popdata=genmaf.popdata(alpha,beta,gamma,maf,N=Pop.N )
#   Nc=unlist(lapply(Popdata,function(x){dim(x)[1]}))
#   sim=replicate(T,{
#     ccdata=gen.ccdata(n,Popdata,Nc)
#     y=ccdata$y
#     G=ccdata$g
#     X=ccdata[,-(1:2)]
#     cp.estimate(y,G,X=X)})
#   result=t(sim)
#   value=result[,1:3]
#   pvalue=result[,-(1:3)]
#   mse=apply(value,2,function(x){mean((x-beta)^2)})
#   bias=apply(value,2,function(x){mean(x)-beta})
#   power=apply(pvalue<0.05,2,mean,rm.na=TRUE)
#   outre[r,]=round(c(mse,bias,power),4)
#   cat("/nThe beta is ",beta)
#   cat("/nThe power is ",power,"/n")
# }
# proc.time()-ptm
# setwd("/maf-no/")
# e=c("maf1.txt","maf2.txt","maf3.txt","maf4.txt","maf5.txt","maf6.txt","maf7.txt","maf8.txt","maf9.txt")
# write.csv(outre,e[m.index])
#
#
power
maf
